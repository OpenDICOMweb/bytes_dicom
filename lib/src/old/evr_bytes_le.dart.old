//  Copyright (c) 2016, 2017, 2018,
//  Poplar Hill Informatics and the American College of Radiology
//  All rights reserved.
//  Use of this source code is governed by the open source license
//  that can be found in the odw/LICENSE file.
//  Primary Author: Jim Philbin <jfphilbin@gmail.edu>
//  See the AUTHORS file for other contributors.
//
import 'dart:typed_data';

import 'package:bytes/bytes.dart';
import 'package:bytes_dicom/src/bytes/bytes_dicom.dart';
import 'package:bytes_dicom/src/bytes/element_interface.dart';
import 'package:bytes_dicom/src/bytes/to_string_mixin.dart';
import 'package:bytes_dicom/src/bytes/evr_bytes_mixin.dart';

/// Explicit Little Endian Element with short (16-bit) Value Field Length.
class BytesLEShortEvr extends BytesDicomLE
    with EvrShortBytes, BytesDicomMixin, EvrMixin, ToStringMixin
    implements ElementInterface {
  /// Returns an [BytesLEShortEvr] containing [buf].
  BytesLEShortEvr(Uint8List buf) : super(buf);

  /// Returns an empty [BytesLEShortEvr] with length [length].
  BytesLEShortEvr.empty(int length) : super.empty(length);

  /// Returns an [BytesLEShortEvr] created from [bytes].
  BytesLEShortEvr.from(Bytes bytes, [int offset = 0, int length])
      : super.from(bytes, offset, length);

  /// Creates a new [BytesLEShortEvr] from a [TypedData] containing
  /// the specified region.
  BytesLEShortEvr.typedDataView(TypedData td, [int offset = 0, int length])
      : super.typedDataView(td, offset, length);

  /// Returns an [BytesLEShortEvr] created from a view of [bytes].
  factory BytesLEShortEvr.view(Bytes bytes, [int offset = 0, int length]) =>
      BytesLEShortEvr.typedDataView(bytes.asUint8List(offset, length));

  /// Returns an [BytesLEShortEvr] with an empty Value Field.
  factory BytesLEShortEvr.element(int code, int vrCode, int vfLength) {
    assert(vfLength.isEven);
    final e = BytesLEShortEvr.empty(kVFOffset + vfLength)
      ..setHeader(code, vfLength, vrCode);
    return e;
  }

  /// Returns an [BytesLEShortEvr] created from a view
  /// of a Value Field ([vfBytes]).
  factory BytesLEShortEvr.fromVFBytes(int code, int vrCode, Bytes vfBytes) {
    final vfLength = vfBytes.length;
    assert(vfLength.isEven);
    final e = BytesLEShortEvr.empty(kVFOffset + vfLength)
      ..setHeader(code, vfLength, vrCode)
      ..setUint8List(kVFOffset, vfBytes.buf);
    return e;
  }

  /// Returns a copy of _this_ containing the bytes from [start] inclusive
  /// to [end] exclusive. If [end] is omitted, the [length] of _this_ is used.
  /// An error occurs if [start] is outside the range 0 .. [length],
  /// or if [end] is outside the range [start] .. [length].
  @override
  BytesLEShortEvr sublist([int start = 0, int end]) =>
      BytesLEShortEvr.from(this, start, (end ?? length) - start);

  /// The Value Field offset.
  static const int kVFOffset = 8;
}

/// Explicit Little Endian [Bytes] with long (32-bit) Value Field Length.
class BytesLELongEvr extends BytesDicomLE
    with EvrLongBytes, BytesDicomMixin, EvrMixin, ToStringMixin
    implements ElementInterface {
  /// Returns an [BytesLEShortEvr] containing [buf].
  BytesLELongEvr(Uint8List buf) : super(buf);

  /// Returns an empty [BytesLEShortEvr] with length [length].
  BytesLELongEvr.empty(int length) : super.empty(length);

  /// Returns an [BytesLEShortEvr] created from [bytes].
  BytesLELongEvr.from(Bytes bytes, [int offset = 0, int length])
      : super.from(bytes, offset, length);

  /// Creates a new [BytesLELongEvr] from a [TypedData] containing
  /// the specified region.
  BytesLELongEvr.typedDataView(TypedData td, [int offset = 0, int length])
      : super.typedDataView(td, offset, length);

  /// Returns an [BytesLEShortEvr] created from a view of [bytes].
  factory BytesLELongEvr.view(Bytes bytes, [int offset = 0, int length]) =>
      BytesLELongEvr.typedDataView(bytes.asUint8List(offset, length));

  /// Returns an [BytesLELongEvr] with an empty Value Field.
  factory BytesLELongEvr.element(int code, int vrCode, int vfLength) {
    assert(vfLength.isEven);
    final e = BytesLELongEvr.empty(kVFOffset + vfLength)
      ..setHeader(code, vfLength, vrCode);
    return e;
  }

  /// Creates an [BytesLELongEvr].
  factory BytesLELongEvr.fromVFBytes(int code, int vrCode, Bytes vfBytes) {
    final vfLength = vfBytes.length;
    assert(vfLength.isEven);
    final e = BytesLELongEvr.empty(kVFOffset + vfLength)
      ..setHeader(code, vfLength, vrCode)
      ..setUint8List(kVFOffset, vfBytes.buf);
    return e;
  }

  /// Returns a copy of _this_ containing the bytes from [start] inclusive
  /// to [end] exclusive. If [end] is omitted, the [length] of _this_ is used.
  /// An error occurs if [start] is outside the range 0 .. [length],
  /// or if [end] is outside the range [start] .. [length].
  @override
  BytesLELongEvr sublist([int start = 0, int end]) =>
      BytesLELongEvr.from(this, start, (end ?? length) - start);

  /// The offset to the Value Field.
  static const int kVFOffset = 12;
}
